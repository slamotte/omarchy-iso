#!/bin/bash

# Abort if anything fails
set -e

# Parse command line arguments
NO_CACHE=""
while [[ $# -gt 0 ]]; do
  case $1 in
  --no-cache)
    NO_CACHE=1
    shift
    ;;
  --no-boot-offer)
    NO_BOOT_OFFER=1
    shift
    ;;
  *)
    echo "Unknown option: $1"
    echo "Usage: $0 [--no-cache] [--no-boot-offer]"
    exit 1
    ;;
  esac
done

# Ensure we have the submodule checked out
git submodule update --init --recursive --jobs=8

# Prepare build repo
BUILD_SCRIPT="builder/build-iso.sh"
BUILD_ROOT=$(realpath "${BASH_SOURCE[0]%/*}/..")
BUILD_RELEASE_PATH="$BUILD_ROOT/release"
mkdir -p "$BUILD_RELEASE_PATH"

OMARCHY_INSTALLER_REPO="${OMARCHY_INSTALLER_REPO:-basecamp/omarchy}"
OMARCHY_INSTALLER_REF="${OMARCHY_INSTALLER_REF:-master}"

DOCKER_ARGS=(
  --rm
  --privileged
  --platform linux/amd64 # Suppress warnings if building on Apple Silicon
  -e "OMARCHY_INSTALLER_REPO=$OMARCHY_INSTALLER_REPO"
  -e "OMARCHY_INSTALLER_REF=$OMARCHY_INSTALLER_REF"
  -e "HOST_UID=$(id -u)"
  -e "HOST_GID=$(id -g)"
  -v "$BUILD_RELEASE_PATH/:/out/"
  -v "$BUILD_ROOT/$BUILD_SCRIPT:/$BUILD_SCRIPT:ro"
  -v "$BUILD_ROOT/archiso:/archiso:ro"
  -v "$BUILD_ROOT/builder:/builder:ro"
  -v "$BUILD_ROOT/configs:/configs:ro"
)

# Set up host caching unless disabled
if [[ -z "$NO_CACHE" ]]; then
  OMARCHY_CACHE_DIR="${OMARCHY_CACHE_DIR:-$HOME/.cache/omarchy}"

  # Use a local pacman cache to speed up repeat runs
  DOCKER_ARGS+=(-v "$OMARCHY_CACHE_DIR/pacman:/var/cache/pacman")
  mkdir -p "$OMARCHY_CACHE_DIR/pacman"

  # Use a dated dir on the host to refresh daily if building multiple times
  OFFLINE_REPO_BASE="$OMARCHY_CACHE_DIR/iso"
  TODAY=$(date +%Y-%m-%d)
  OFFLINE_REPO_BUILD_CACHE_DIR="$OFFLINE_REPO_BASE/$TODAY/airootfs/var/cache/omarchy"
  mkdir -p "$OFFLINE_REPO_BUILD_CACHE_DIR"

  # Mount to /var/cache/airootfs/var/cache/omarchy since that's where repo packages go in the ISO
  DOCKER_ARGS+=(-v "$OFFLINE_REPO_BUILD_CACHE_DIR:/var/cache/airootfs/var/cache/omarchy")

  # Wipe stale cache folders
  find "$OFFLINE_REPO_BASE" -mindepth 1 -maxdepth 1 -type d ! -name "$TODAY" -exec rm -rf {} +
fi

# Run the builder with assembled args
docker run "${DOCKER_ARGS[@]}" archlinux/archlinux:latest /$BUILD_SCRIPT

# Move as install ref
latest_iso=$(\ls -t "$BUILD_RELEASE_PATH"/*.iso | head -n1)
iso_ref="${latest_iso%.*}-$OMARCHY_INSTALLER_REF.iso"
mv -f "$latest_iso" "$iso_ref"

# Offer to boot the new build
if [[ -z "$NO_BOOT_OFFER" ]]; then
  echo
  gum confirm "Boot $iso_ref?" && omarchy-iso-boot "$iso_ref"
fi
